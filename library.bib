@book{Ammann2008,
abstract = {Extensively class-tested, this textbook takes an innovative approach to software testing: it defines testing as the process of applying a few well-defined, general-purpose test criteria to a structure or model of the software. It incorporates the latest innovations in testing, including techniques to test modern types of software such as OO, web applications, and embedded software. The book contains numerous examples throughout. An instructor's solution manual, PowerPoint slides, sample syllabi, additional examples and updates, testing tools for students, and example software programs in Java are available on an extensive website.},
author = {Ammann, Paul and Offutt, Jeff},
edition = {1},
file = {:C$\backslash$:/Users/Administrador/Dropbox/Trabajo de Grado/Testing/Introduction to Software Testing.pdf:pdf},
isbn = {0521880386, 9780521880381},
pages = {21--22},
publisher = {Cambridge University Press},
title = {{Introduction to Software Testing}},
url = {http://books.google.com/books?id=leokXF8pLY0C\&pgis=1},
year = {2008}
}
@techreport{Arias2012,
abstract = {Concurrent Constraint Programming (ccp) is a formalism for concurrency in which agents (processes) interact with one another by adding (telling) and reading (asking) information represented as constraints in a shared medium (store). Temporal Concurrent Constraint Programming (tcc) extends ccp by adding temporal constructs for modeling timed and reactive systems. Formal verification plays an important role in detecting errors in concurrent systems since it allows to check whether or not a system satisfies a given property. Model checking is a formal verification technique that, given a finite-state model of a system and a property, it systematically checks whether the property is satisfied by the model. This project degree studies model checking as a formal method for the verification of tcc programs. The study is conducted by defining a model checking algorithm for tcc. To accomplish this, we extend the classical algorithm of model checking for LTL. We define a structure called tcc Structure which allows to model the behavior of a tcc system, and we then describe a specific logic which allows to reason about tcc programs. We also introduce the model checking graph and the properties that it must meet to determine that the model satisfies the property. Finally, we present a prototype which implements the proposed algorithm.},
address = {Cali},
author = {Arias, Jaime},
file = {:C$\backslash$:/Users/Administrador/Dropbox/Trabajo de Grado/TESIS RELACIONADAS/thesisJaimito.desbloqueado.pdf:pdf},
pages = {1--85},
institution = {Programa de Ingenier\'ia Electr\'onica, Pontificia Universidad Javeriana Cali},
school = {Programa de Ingenier\'ia Electr\'onica, Pontificia Universidad Javeriana Cali},
title = {{Model Checking for tcc Calculus}},
year = {2012}
}
@book{Baier2008,
abstract = {Our growing dependence on increasingly complex computer and software systems necessitates the development of formalisms, techniques, and tools for assessing functional properties of these systems. One such technique that has emerged in the last twenty years is model checking, which systematically (and automatically) checks whether a model of a given system satisfies a desired property such as deadlock freedom, invariants, and request-response properties. This automated technique for verification and debugging has developed into a mature and widely used approach with many applications. Principles of Model Checking offers a comprehensive introduction to model checking that is not only a text suitable for classroom use but also a valuable reference for researchers and practitioners in the field. The book begins with the basic principles for modeling concurrent and communicating systems, introduces different classes of properties (including safety and liveness), presents the notion of fairness, and provides automata-based algorithms for these properties. It introduces the temporal logics LTL and CTL, compares them, and covers algorithms for verifying these logics, discussing real-time systems as well as systems subject to random phenomena. Separate chapters treat such efficiency-improving techniques as abstraction and symbolic manipulation. The book includes an extensive set of examples (most of which run through several chapters) and a complete set of basic results accompanied by detailed proofs. Each chapter concludes with a summary, bibliographic notes, and an extensive list of exercises of both practical and theoretical nature.Christel Baier is Professor and Chair for Algebraic and Logical Foundations of Computer Science in the Faculty of Computer Science at the Technical University of Dresden. Joost-Pieter Katoen is Professor at the RWTH Aachen University and leads the Software Modeling and Verification Group within the Department of Computer Science. He is affiliated with the Formal Methods and Tools Group at the University of Twente.},
author = {Baier, Christel and Katoen, Joost-Pieter},
file = {:C$\backslash$:/Users/Administrador/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Baier, Katoen - 2008 - Principles of Model Checking.pdf:pdf},
isbn = {026202649X, 9780262026499},
pages = {1--18},
publisher = {The MIT Press},
title = {{Principles of Model Checking}},
url = {http://books.google.com/books?id=nDQiAQAAIAAJ\&pgis=1 http://f3.tiera.ru/2/Cs\_Computer science/CsF\_Formal methods/Baier C., Katoen J. Principles of Model Checking (MIT, 2008)(ISBN 9780262026499)(O)(994s)\_CsAl\_.pdf},
year = {2008}
}
@article{Vaovic2005,
    author = "Bo{\"s}tjan Vlaovi{\"c} and Aleksander Vre{\"z}e and Zmago Brezo{"c}nik and Tatjana Kapus",
    title = "{Verification of an SDL Specification -- a Case Study}",
    journal = "Electrotechnical Review",
    pages = "14-21",
    year = 2005,
    volume = 72
}
@inproceedings{Bowen2002,
abstract = {Formal methods have traditionally been used for specification and development of software. However there are potential benefits for the testing stage as well. The panel session associated with this paper explores the usefulness or otherwise of formal methods in various contexts for improving software testing. A number of different possibilities for the use of formal methods are explored and questions raised. The contributors are all members of the UK FORTEST Network on formal methods and testing. Although the authors generally believe that formal methods are useful in aiding the testing process, this paper is intended to provoke discussion. Dissenters are encouraged to put their views to the panel or individually to the authors.},
author = {Bowen, J.P. and Bogdanov, K. and Clark, J.A. and Harman, M. and Hierons, R.M. and Krause, P.},
booktitle = {Proceedings 26th Annual International Computer Software and Applications},
doi = {10.1109/CMPSAC.2002.1044538},
file = {:C$\backslash$:/Users/Administrador/Dropbox/Trabajo de Grado/TESIS RELACIONADAS/TS4FORTEST Formal Methods and Testing.pdf:pdf},
isbn = {0-7695-1727-7},
issn = {0730-3157},
keywords = {Application software,Automatic testing,Computer errors,Computer industry,Computer networks,Laboratories,Physics computing,Software testing,System testing,Uniform resource locators},
pages = {91--101},
publisher = {IEEE Comput. Soc},
shorttitle = {Computer Software and Applications Conference, 200},
title = {{FORTEST: formal methods and testing}},
url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=1044538},
year = {2002}
}
@article{Bowen2000,
abstract = {Safety-critical systems require the utmost care in their specification and design to avoid errors in their implementation; and will almost certainly result in financial penalties in the long run; but education and ethical considerations should help provide more self-imposed guidelines for all those involved in the production of safety-critical systems. This paper considers some of the issues involved; especially with respect to the use of formal methods.; using state of the art techniques in a responsible manner. To do otherwise is at best unprofessional and at worst can lead to disastrous consequences. An inappropriate approach could lead to loss of life; whether because of loss of business or because of the imposition of fines. Legislation and standards impose external pressures; with pointers to material providing greater depth in particular areas},
author = {Bowen, Jonathan P.},
file = {:C$\backslash$:/Users/Administrador/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Bowen - Unknown - The Ethics of Safety-Critical Systems.pdf:pdf},
journal = {Communications of the ACM},
pages = {91----97},
title = {{The Ethics of Safety-Critical Systems}},
url = {http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.24.8027},
volume = {43},
year = {2000}
}
@inproceedings{Bozga2001,
abstract = {This paper summarizes our experience with IF, an open validation environment for distributed software systems. Indeed, face to the increasing complexity of such systems, none of the existing tools can cover by itself the whole validation process. The IF environment was built upon an expressive intermediate language and allows to connect several validation tools, providing most of the advanced techniques currently available. The results obtained on several large case-studies, including telecommunication protocols and embedded software systems, confirm the practical interest of this approach},
author = {Bozga, M. and Graf, S. and Mounier, L.},
booktitle = {Proceedings IEEE International Symposium on Network Computing and Applications. NCA 2001},
doi = {10.1109/NCA.2001.962542},
file = {:C$\backslash$:/Users/Administrador/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Bozga, Graf, Mounier - 2001 - Automated validation of distributed software using the IF environment.pdf:pdf},
isbn = {0-7695-1432-4},
keywords = {Communication industry,Communication system software,Computer industry,Embedded software,Embedded system,Equations,IF environment,Production systems,Protocols,Software systems,Unified modeling language,automated validation,distributed software,distributed software systems,embedded software systems,embedded systems,expressive intermediate language,open validation environment,program verification,telecommunication protocols},
pages = {268--274},
publisher = {IEEE Comput. Soc},
shorttitle = {Network Computing and Applications, 2001. NCA 2001},
title = {{Automated validation of distributed software using the IF environment}},
url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=962542},
year = {2001}
}
@inproceedings{Bozga1999,
abstract = {We present work of a project for the improvement of a specification/validation toolbox integrating a commercial toolset ObjectGeode and different validation tools such as the verification tool CADP and the test sequence generator TGV. The intrinsic complexity of most protocol specifications lead us to study combinations of techniques such as static analysis and abstraction together with classical model-checking techniques. Experimentation and validation of our results in this context motivated the development of an intermediate representation for SDL called IF. In IF, a system is represented as a set of timed automata communicating asynchronously through a set of buffers or by rendez-vous through a set of synchronization gates. The advantage of the use of such a program level intermediate representation is that it is easier to interface with various existing tools, such as static analysis, abstraction and compositional state space generation. Moreover, it allows to define for SDL different, but mathematically sound, notions of time. We illustrate the use of IF on a small example, a distributed leader election algorithm, on which we perform experimentation using static analysis and compositional generation.},
author = {Bozga, Marius and Fernandez, Jean-Claude and Ghirvu, Constantin Lucian and Graf, Susanne and {Jean Pierre}, Krimm and Mounier, Laurent and Sifakis, Joseph},
booktitle = {SDL '99 The Next Millennium, 9th International SDL Forum},
keywords = {Model-Checking,SDL,Static Analysis,Test Generation,Time Semantics,Validation},
month = jun,
pages = {423--440},
title = {{IF: An Intermediate Representation for SDL and its Applications}},
url = {http://hal.archives-ouvertes.fr/hal-00374129},
year = {1999}
}
@book{Bozga2004,
address = {Berlin, Heidelberg},
author = {Bozga, Marius and Graf, Susanne and Ileana, Ober and Iulian, Ober and Joseph, Sifakis},
doi = {10.1007/b110123},
editor = {Bernardo, Marco and Corradini, Flavio},
file = {:C$\backslash$:/Users/Administrador/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Bozga et al. - 2004 - Formal Methods for the Design of Real-Time Systems.pdf:pdf},
isbn = {978-3-540-23068-7},
pages = {237--267},
publisher = {Springer Berlin Heidelberg},
series = {Lecture Notes in Computer Science},
title = {{Formal Methods for the Design of Real-Time Systems}},
url = {http://www.springerlink.com/index/10.1007/b110123},
volume = {3185},
year = {2004}
}
@techreport{BravoParra2006,
address = {Mexico},
author = {Bravo, Adolfo and Parra, Jaime},
file = {:C$\backslash$:/Users/Administrador/Dropbox/Trabajo de Grado/TESIS RELACIONADAS/TS5UAMI12970.pdf:pdf},
institution = {Programa Computaci\'{o}n,Universidad Autonoma Metropolitana Unidad de Iztapalapa},
pages = {1--65},
title = {{Verificaci\'{o}n formal de Sistemas}},
year = {2006}
}
@article{Clarke1996,
author = {Clarke, Edmund M. and Wing, Jeannette M.},
doi = {10.1145/242223.242257},
file = {:C$\backslash$:/Users/Administrador/Dropbox/Trabajo de Grado/Verificacion/Clarke1996-Formal\_methods\_state\_of\_the\_art\_and\_future\_directions.pdf:pdf},
issn = {03600300},
journal = {ACM Computing Surveys},
month = dec,
number = {4},
pages = {626--643},
publisher = {ACM},
title = {{Formal methods: state of the art and future directions}},
url = {http://dl.acm.org/citation.cfm?id=242223.242257},
volume = {28},
year = {1996}
}
@book{Coulouris2005a,
author = {Coulouris and Dollimore, Jean and Kindberg, Tim},
file = {:C$\backslash$:/Users/Administrador/Dropbox/Trabajo de Grado/MODELACION/Jean Dollimore, Tim Kindberg, George Coulouris-Distributed Systems\_ Concepts and Design (4th Edition)-Addison Wesley (2005).pdf:pdf},
isbn = {0321263545},
pages = {944},
publisher = {Addison Wesley; 4 edition},
title = {{Distributed Systems: Concepts and Design}},
url = {http://www.amazon.com/Distributed-Systems-Concepts-Design-Edition/dp/0321263545/ref=cm\_cr\_pr\_product\_top},
year = {2005}
}
@inproceedings{Ebner,
annote = {- Las pruebas dentro del desarrollo de sistemas es una tarea costosa y que consume mucho tiempo.

        
- TTCN-2 ha sido aplicado exitosamente a las pruebas funcionales de protocolos de comunicacion por a\~{n}os.

        
- Lo que se desea hacer es por medio de MSC se especifica manualmente el prop\'{o}sito de la prueba y los casos, para obtener automaticamente un a prueba en TTCN-3.

      },
author = {Ebner, Michael},
booktitle = {In Workshop on Integrated-reliability with Telecommunications and UML Languages (ISSRE04:WITUL)},
file = {:C$\backslash$:/Users/Administrador/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Ebner - Unknown - TTCN-3 Test Case Generation from Message Sequence Charts.pdf:pdf},
title = {{TTCN-3 Test Case Generation from Message Sequence Charts}},
url = {http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.109.6402},
year = {2004}
}
@inproceedings{Andrus,
author = {Andrus, Lehtmets and Rannaste, Anna},
editor = {ELVIOR},
file = {:C$\backslash$:/Users/Administrador/Dropbox/Trabajo de Grado/Testing/Sissejuhatus\_TTCN-3\_keelde.pdf:pdf},
pages = {1--17},
title = {{TTCN-3 Basic Introduction}},
url = {http://cs.ttu.ee/tiki-index.php?page=ITI8901},
year = {2011}
}

@phdthesis{Reiners,
author = {Reniers, Adriaan Michael},
pages = {1--16},
school = {UnivesiteitsDrukkerij, Eindhoven},
title = {{Message Sequence Charts Syntax and Semantics}},
year = {1999}
}


@ONLINE{ETSI,
author = {{ETSI's TTCN-3.org Editorial Team}},
title = {{Introduction TTCN-3. Disponible en: \url{http://www.ttcn-3.org/index.php/about/introduction}. Accesado el d\'ia 08/05/14}},
url = {http://www.ttcn-3.org/index.php/about/introduction},
urldate = {08/05/14}
}
@book{Fix2008,
abstract = {Model checking technologies have been applied to hardware verification in the last 15 years. Pioneering work has been conducted in Intel since 1990 using model checking technologies to build industrial hardware verification systems. This paper reviews the evolution and the success of these systems in Intel and in particular it summarizes the many challenges and learning that have resulted from changing how hardware validation is performed in Intel to include formal property verification. The paper ends with a discussion on how the learning from hardware verification can be used to accelerate the industrial deployment of model-checking technologies for software verification},
address = {Berlin, Heidelberg},
author = {Fix, Limor},
doi = {10.1007/978-3-540-69850-0},
editor = {Grumberg, Orna and Veith, Helmut},
file = {:C$\backslash$:/Users/Administrador/Dropbox/Trabajo de Grado/TESIS RELACIONADAS/Fifteen Years of Formal Property Verification in Intel.pdf:pdf},
isbn = {978-3-540-69849-4},
issn = {0302-9743},
keywords = {Model checking,formal property verification,formal specification},
month = jan,
pages = {139--144},
publisher = {Springer Berlin Heidelberg},
series = {Lecture Notes in Computer Science},
title = {{25 Years of Model Checking}},
url = {http://dl.acm.org/citation.cfm?id=1423535.1423543},
volume = {5000},
year = {2008}
}
@article{Grabowski2003,
abstract = {The testing and test control notation (TTCN-3) is a new test specification and test implementation language that supports all kinds of black-box testing of distributed systems. TTCN-3 was developed in the years 1999 to 2002 at the European Telecommunications Standards Institute (ETSI), as a redesign of the tree and tabular combined notation (TTCN) standard (ITU-T Rec. X.292). TTCN-3 is built from a textual core language that provides interfaces to different data description languages and the possibility of different presentation formats. This makes TTCN-3 quite universal and application independent. TTCN-3 is being published as the ITU-T Rec. Z.140 series. This paper provides an introduction to TTCN-3. This includes an overall view of the TTCN-3 core language, a description of the existing presentation formats, an explanation of the implementation of TTCN-3-based test systems and a discussion about the current usage and the future of the language. The authors all participated in the work within ETSI.},
annote = {Este},
author = {Grabowski, Jens and Hogrefe, Dieter and R\'{e}thy, Gy\"{o}rgy and Schieferdecker, Ina and Wiles, Anthony and Willcock, Colin},
doi = {10.1016/S1389-1286(03)00249-4},
file = {:C$\backslash$:/Users/Administrador/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Grabowski et al. - 2003 - An introduction to the testing and test control notation (TTCN-3).pdf:pdf},
issn = {13891286},
journal = {Computer Networks},
keywords = {Black-box testing,Distributed systems testing,ETSI,Standardization,TTCN,TTCN-3,Test implementation,Test languages,Test specification},
month = jun,
number = {3},
pages = {375--403},
title = {{An introduction to the testing and test control notation (TTCN-3)}},
url = {http://www.sciencedirect.com/science/article/pii/S1389128603002494},
volume = {42},
year = {2003}
}
@inproceedings{Jia2001,
abstract = {In this paper, we describe a case study on the verification of a real industrial protocol for wireless ATM, called MASCARA. Several tools have been used: SDL has been chosen as the specification language and the commercial tool ObjectGeode has been used for creating and maintaining SDL descriptions. The IF tool-set has been used for generation, minimization and comparison of system models and verification of expected properties. All specification and verification tools are connected via the IF language, which has been defined as an intermediate representation for timed asynchronous systems as well as an open validation environment. Due to the complexity of the protocol, static analysis techniques, such as live variable analysis and program slicing, were the key to the success of this case study. The results obtained give some hints concerning a methodology for the formal verification of real systems.},
author = {Graf, Susanne and Jia, Guoping},
booktitle = {Model Checking Software, 8th International SPIN Workshop, Toronto, Canada, May 19-20, 2001, Proceedings},
file = {:C$\backslash$:/Users/Administrador/Dropbox/Trabajo de Grado/Verificacion/p123-jia.pdf:pdf},
month = may,
publisher = {Springer Verlag},
series = {LNCS},
title = {{Verification Experiments on the \{Mascara\} Protocol}},
volume = {2057},
year = {2001}
}
@techreport{Hames2009,
abstract = {Many computer systems in our daily life require high availability applications (for example, medical equipment) and some others run on difficult-to-access places (for example, satellites). These systems are subject to a variety of potential failures that may jeopardize their performance. Fault tolerance cannot be achieved just by adding redundant modules to a system, and systematic techniques need be used to determine its correct behavior. Model checking is a formal technique that can automatically decide whether the given model of a system satisfies a required property. In contrast with testing and simulation, model checking explores all possible states and behaviors of a system. This work presents 1) a declarative language for fault modelling, 2) Falluto, a model checking tool for the verification of fault tolerant systems, 3) a method for verifying those systems and 4) its application on two case studies of real distributed systems, using the language and the tool.},
address = {Cordoba, Argentina},
author = {Hames, Edgardo},
file = {:C$\backslash$:/Users/Administrador/Dropbox/Trabajo de Grado/TESIS RELACIONADAS/Un model checker para.....pdf:pdf},
institution = {Facultad de matem\'{a}tica, Astronom\'{\i}a y F\'{\i}sica,Universidad Nacional de C\'{o}rdoba},
keywords = {ingenier\'{\i}a de software,model checking,tolerancia a fallas,verificaci\'{o}n de sistemas},
pages = {13--37},
title = {{Falluto : Un model checker para la verificaci\'{o}n de sistemas tolerantes a fallas}},
year = {2009}
}
@article{Hierons2009,
author = {Hierons, Robert M. and Krause, Paul and L\"{u}ttgen, Gerald and Simons, Anthony J. H. and Vilkomir, Sergiy and Woodward, Martin R. and Zedan, Hussein and Bogdanov, Kirill and Bowen, Jonathan P. and Cleaveland, Rance and Derrick, John and Dick, Jeremy and Gheorghe, Marian and Harman, Mark and Kapoor, Kalpesh},
doi = {10.1145/1459352.1459354},
file = {:C$\backslash$:/Users/Administrador/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Hierons et al. - 2009 - Using formal specifications to support testing(2).pdf:pdf},
issn = {03600300},
journal = {ACM Computing Surveys},
keywords = {Software testing,formal methods},
month = feb,
number = {2},
pages = {1--76},
publisher = {ACM},
title = {{Using formal specifications to support testing}},
url = {http://dl.acm.org/citation.cfm?id=1459352.1459354},
volume = {41},
year = {2009}
}
@book{Gaudel1996,
address = {Berlin, Heidelberg},
author = {Hoare, C.A.R},
doi = {10.1007/3-540-60973-3},
editor = {Gaudel, Marie-Claude and Woodcock, James},
file = {:C$\backslash$:/Users/Administrador/Dropbox/Trabajo de Grado/TESIS RELACIONADAS/HowDidSoftwareGetSoReliableWithoutProof.pdf:pdf},
isbn = {978-3-540-60973-5},
publisher = {Springer Berlin Heidelberg},
series = {Lecture Notes in Computer Science},
title = {{How Did Software Get So Reliable Without Proof?}},
url = {http://www.springerlink.com/index/10.1007/3-540-60973-3},
volume = {1051},
year = {1996}
}
@book{Homes2013,
abstract = {The testing market is growing at a fast pace and ISTQB certifications are being increasingly requested, with more than 180,000 persons currently certified throughout the world. The ISTQB Foundations level syllabus was updated in 2011, and this book provides detailed course study material including a glossary and sample questions to help adequately prepare for the certification exam.The fundamental aspects of testing are approached, as is testing in the lifecycles from Waterfall to Agile and iterative lifecycles. Static testing, such as reviews and static analysis, and their benefits are examined as well as techniques such as Equivalence Partitioning, Boundary Value Analysis, Decision Table Testing, State Transitions and use cases, along with selected white box testing techniques. Test management, test progress monitoring, risk analysis and incident management are covered, as are the methods for successfully introducing tools in an organization.Contents1. Fundamentals of Testing.2. Testing Throughout the Software Life Cycle.3. Static Techniques (FL 3.0).4. Test Design Techniques (FL 4.0).5. Test Management (FL 5.0).6. Tools support for Testing (FL 6.0).7. Mock Exam.8. Templates and Models.9. Answers to the Questions.},
author = {Hom\`{e}s, Bernard},
doi = {10.1002/9781118602270.ch5},
file = {:C$\backslash$:/Users/Administrador/Dropbox/Trabajo de Grado/Testing/Fundamentals of Software Testing.pdf:pdf},
isbn = {9781118602270},
keywords = {Configuration management,Estimation methods,Failure mode and effect analysis (FMEA),Hazard analysis,International Software Testing Qualifications Boar,Risk-based testing method,Scrum model,Test management,Uniform test distribution},
pages = {342},
publisher = {John Wiley \& Sons, Inc},
title = {{Fundamentals of Software Testing}},
url = {http://books.google.com.co/books/about/Fundamentals\_of\_Software\_Testing.html?id=ZqoaFElPJLgC\&pgis=1 http://dx.doi.org/10.1002/9781118602270.ch5},
year = {2013}
}
@manual{SDL2002,
annote = {M\'{a}s informaci\'{o}n en $\backslash$url\{www.sdl-forum.org\}},
author = {ITU-T},
file = {:C$\backslash$:/Users/Administrador/Dropbox/Trabajo de Grado/MODELACION/Z.100\_1199.pdf:pdf},
keywords = {Data types,formal description technique,functional specification,graphical,hierarchical decomposition,object orientation,specification technique,state machine},
title = {{ITU-T Rec. Z.100 -- Formal description techniques (FDT) -- Specification and Description Language (SDL)}},
url = {http://www.itu.int/ITU-T/studygroups/com10/languages/Z.100\_1199.pdf},
year = {2002}
}
@article{JensGrabowski1999,
annote = {-Pretenden explicar como las pruebras concurrentesen TTCN pueden ser generadas directamente desde SDL donde esta la especificaci\'{o}n del sistema y MSC que es el prop\'{o}sito de la prueba.

        

        

      },
author = {{Jens Grabowski}, Beat Koch},
file = {:C$\backslash$:/Users/Administrador/Dropbox/Trabajo de Grado/Testing/SDL99-DistributedTesting.pdf:pdf},
title = {{SDL and MSC Based Test Generation for Distributed Test Architectures}},
year = {1999}
}
@book{Kropf1999,
abstract = {This advanced textbook presents an almost complete overview of techniques for hardware verification. It covers all approaches used in existing tools, such as binary and word-level decision diagrams, symbolic methods for equivalence and temporal logic model checking, and introduces the use of higher-order logic theorem proving for verifying circuit correctness. Each chapter contains an introduction and a summary as well as a section for the advanced reader, aiding an understanding of the advantages and limitations of each technique. Backed by many examples and illustrations, this text will appeal to a broad audience, from beginners in system design to experts. XXXXXXX Neuer Text This is a complete overview of existing techniques for hardware verification. It covers all approaches used in existing verification tools, such as symbolic methods for equivalence checking, temporal logic model checking, and higher-order logic theorem proving for verifying circuit correctness. The book helps readers to understand the advantages and limitations of each technique. Each chapter contains a summary as well as a section for the advanced reader.},
author = {Kropf, Thomas},
edition = {1st},
file = {:C$\backslash$:/Users/Administrador/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Kropf - 1999 - Introduction to Formal Hardware Verification.pdf:pdf},
isbn = {3540654453},
pages = {299},
publisher = {Springer-Verlag New York, Inc.},
title = {{Introduction to Formal Hardware Verification}},
url = {http://books.google.com.co/books/about/Introduction\_to\_Formal\_Hardware\_Verifica.html?id=p3xSw3AIlToC\&pgis=1},
year = {1999}
}
@inproceedings{MariusMinea,
address = {Romania},
author = {{Marius Minea}, Călin Jebelean},
booktitle = {Proceedings of the NATO Advanced Research Workshop on Concurrent Information Processing and Computing},
file = {:C$\backslash$:/Users/Administrador/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Marius Minea - Unknown - Experience with Formal Verification of SDL Protocols.pdf:pdf},
pages = {pp. 185----192},
publisher = {Al. I. Cuza University Press},
title = {{Experience with Formal Verification of SDL Protocols}},
url = {http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.97.1077},
year = {2003}
}
@unpublished{Mikovski2009,
abstract = {Los algoritmos de verificaci\'{o}n de modelos (Model Checking) verifican una f\'{o}rmula l\'{o}gica sobre un modelo. Esta t\'{e}cnica permite tanto comprobar un correcto funcionamiento como descubrir errores de dise\~{n}o y es aplicable a una gran variedad de campos. Una desventaja com\'{u}n al utilizar esta t\'{e}cnica es que dichos modelos deben ser traducidos al lenguaje concreto del sistema de Model Checking. El framework que aqu\'{\i} se presenta permite adaptar la t\'{e}cnica a los lenguajes, soportando la definici\'{o}n y uso de lenguajes espec\'{\i}ficos del dominio de forma directa, adem\'{a}s de otras facilidades como permitir una visualizaci\'{o}n de contraejemplos personalizada o una gran flexibilidad en los algoritmos a usar.},
address = {Madrid},
annote = {Proyecto de Sistemas Inform\{\'{a}\}ticos (Facultad de Inform\{\'{a}\}tica, Curso 2008-2009)},
author = {Mikovski, Iv\'{a}n Georgiev and Mart\'{\i}nez, Jos\'{e} Antonio Gonz\'{a}lez and Trotti, Nicol\'{a}s Mon},
file = {:C$\backslash$:/Users/Administrador/Dropbox/Trabajo de Grado/TESIS RELACIONADAS/Fraework\_Flexible\_para\_Model\_Checking\_(Proyecto\_Fin\_de\_Carrera\_2008\_2009).pdf:pdf},
institution = {Universidad Complutense de Madrid},
keywords = {CTL,Framework,Model Checking,contraejemplos,counterexamples.,domain-specific languages,lenguajes espec\'{\i}ficos de dominio},
series = {Trabajos de curso (Departamento de Ingenier\'{\i}a del Software e Inteligencia Artificial , FDI)},
title = {{FlexiMC Framework: framework flexible para model checking}},
url = {http://eprints.ucm.es/9838/},
year = {2009}
}
@techreport{Perez2006,
address = {Mexico},
author = {P\'{e}rez, Sergio and Terceros, Arturo},
file = {:C$\backslash$:/Users/Administrador/Dropbox/Trabajo de Grado/TESIS RELACIONADAS/TS6ValidaciondeModelosUsandoIFToolBOX.pdf:pdf},
institution = {Programa de Ingenier\'{\i}a Electr\'{o}nica, Universidad Aut\'{o}noma Metropolitana Unidad Iztapalpa},
pages = {1--46},
title = {{Validaci\'{o}n de Modelos Uando IF Toolbox}},
year = {2006}
}
@inproceedings{Schieferdecker,
address = {Natal, Brazil},
author = {Schieferdecker, Ina},
booktitle = {ICTSS 2010, Test Automation with TTCN-3},
title = {{Test Automation with TTCN-3: State of the Art and a Future Perspective}},
url = {http://sbmf2010.dimap.ufrn.br/ictss/program/ina.pdf},
year = {2010}
}
@book{Schneider2004,
abstract = {Reactive systems are becoming more and more important for essentially all areas of technical and professional activities as well as for many areas of everyday life. The design of these systems is a great challenge and requires sound compromises between safety and time-to-market. To meet these needs, early design phases nowadays include verification of given specifications against system descriptions to find potential design errors as early as possible. This book is devoted to the foundation of the most popular formal methods for the specification and verification of reactive systems. In particular, the $\mu$-calculus, omega-automata, and temporal logics are covered in full detail; their relationship and state-of-the-art verification procedures based on these formal approaches are presented. Furthermore, the advantages and disadvantages of the formalisms from particular points of view are analyzed. Most results are given with detailed proofs, so that the presentation is almost self-contained. This book is targeted to advanced students, lecturers and researchers in the area of formal methods.},
author = {Schneider, Klaus},
file = {:C$\backslash$:/Users/Administrador/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Schneider - 2004 - Verification of Reactive Systems Formal Methods and Algorithms.pdf:pdf},
isbn = {3540002960},
pages = {600},
publisher = {Springer},
title = {{Verification of Reactive Systems: Formal Methods and Algorithms}},
url = {http://books.google.com/books?hl=en\&lr=\&id=Z92bL1VrD\_sC\&pgis=1},
year = {2004}
}
@article{AlexeiSernaA,
abstract = {The application of formal methods in industry has progressed extensively over the past decade and the results are promising. But despite these achievements and it have been documented in numerous studies, it is still very common the skepticism about its usefulness and applicability. The goal of this paper is to show that its evolution over the past decade exceeds all previous processes and each time they do a better job to satisfy industrial needs. This is achieved by the description of some experiments and the result of various applications in industry and through an analyzing of the needs of companies that must be satisfy the research community in this field.},
author = {Serna, Alexei},
file = {:C$\backslash$:/Users/Administrador/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Serna - 2012 - Formal Methods in Industry.pdf:pdf},
journal = {Revista Antioque\~{n}a de las Ciencias Computacionales y la Ingenier\'{\i}a de Software RACCIS},
keywords = {Journals,academic,access,article,author,center,database,institute,journal,peer-review,publisher,research,review,scholar,subject,university},
number = {2},
pages = {44--51},
title = {{Formal Methods in Industry}},
url = {http://journaldatabase.org/articles/formal\_methods\_industry.html},
volume = {2},
year = {2012}
}
@misc{Tamura2014,
address = {Cali},
author = {Tamura, Eugenio},
file = {:C$\backslash$:/Users/Administrador/Dropbox/Trabajo de Grado/MODELACION/04-SDL.pdf:pdf},
institution = {Pontificia Universidad Javeriana Cali},
keywords = {Specification and Description Languaje},
mendeley-tags = {Specification and Description Languaje},
pages = {1--60},
title = {{Specification and Description Language (SDL) -A Quick Overview-}},
year = {2014}
}
@book{Willcock2011,
abstract = {This unique book provides a fully revised and up-to-date treatment of the TTCN-3 language TTCN-3 is an internationally standardised test language with a powerful textual syntax which has established itself as a global, universal testing language. Application of TTCN-3 has been widened beyond telecommunication systems to areas such as the automotive industry, internet protocols, railway signalling, medical systems, and avionics.An Introduction to TTCN-3 gives a solid introduction to the TTCN-3 language and its uses, guiding readers though the TTCN-3 standards, methodologies and tools with examples and advice based on the authors' extensive real-world experience. All the important concepts and constructs of the language are explained in a step-by-step, tutorial style, and the authors relate the testing language to the overall test system implementation, giving the bigger picture.This second edition of the book has been updated and revised to cover the additions, changes and extensions to the TTCN-3 language since the first version was published. In addition, this book provides new material on the use of XML, test framework design and LTE testing with TTCN-3.Key Features:Provides a fully revised and up-to-date look at the TTCN-3 language Addresses language standardization, tool implementation and applying TTCN-3 in real world scenarios such as VoIP and LTE testing Explores recent advances such as TTCN-3 core language extensions on type parameterization, behavior types, real time and performance testing Introduces the use of ASN.1 and XML with TTCN-3 Written by experts in the field Includes an accompanying website containing code samples and links to the relevant standards documents (www.wiley.com/go/willcock\_ttcn-3\_2e) This book is an ideal reference for test engineers, software developers, and standards professionals. Graduate students studying telecommunications and software engineering will also find this book insightful.},
author = {Willcock, Colin and Dei\ss, Thomas and Tobies, Stephan and Keil, Stefan and Engler, Federico and Schulz, Stephan},
edition = {Second Edi},
file = {:C$\backslash$:/Users/Administrador/Dropbox/Trabajo de Grado/Testing/IntroToTTCN3.pdf:pdf},
isbn = {0470977892},
pages = {352},
publisher = {John Wiley \& Sons},
title = {{An Introduction to TTCN-3}},
url = {http://books.google.com/books?id=ilwaMS9PbxcC\&pgis=1},
year = {2011}
}
@article{Woodcock2009,
author = {Woodcock, Jim and Larsen, Peter Gorm and Bicarregui, Juan and Fitzgerald, John},
doi = {10.1145/1592434.1592436},
file = {:C$\backslash$:/Users/Administrador/Dropbox/Trabajo de Grado/Verificacion/Formal Methods Practice and Experience.pdf:pdf},
issn = {03600300},
journal = {ACM Computing Surveys},
keywords = {Experimental software engineering,formal methods surveys,grand challenges,verified software initiative,verified software repository},
month = oct,
number = {4},
pages = {1--36},
publisher = {ACM},
title = {{Formal methods: Practice and experience}},
url = {http://dl.acm.org/citation.cfm?id=1592434.1592436},
volume = {41},
year = {2009}
}
@misc{,
title = {{MSC}},
url = {http://www.sdl-forum.org/MSC/},
urldate = {21/05/14}
}
@misc{,
title = {{Pruebas de caja negra - Globe Testing}},
url = {http://www.globetesting.com/2012/08/pruebas-de-caja-negra/},
urldate = {08/05/14}
}
@misc{TTCN3_Architecture,
title = {{TTCN-3 Test System Reference Architecture}},
url = {http://www.ttcn-3.org/index.php/about/referrence-architecture},
urldate = {05/06/14}
}
@misc{ISO/IEC 12119,
abstract = {Quality requirements for software packages and instructions on how to test a software package against these requirements are established. The requirements apply to software packages as they are offered and delivered, not to the production process (including activities and intermediate products, such as specifications).},
doi = {10.1109/IEEESTD.2013.6479728},
keywords = {IEC standards,IEEE standards,ISO standards,Information technology,International Standard ISO-IEC 12119,Software,Software packages,Software quality,Software testing,information technology,program testing,quality requirements,software,software engineering,software package,software packages,software quality,software testing,testing},
pages = {1--25},
shorttitle = {IEEE Std 1465-1998(R2004) [Adoption of ISO/IEC 121},
title = {{IEEE Standard - Adoption of International Standard ISO/IEC 12119:1994(E) - Information Technology - Software Packages - Quality Requirements and Testing}},
year = {2013}
}
@misc{ISO 9241,
title = {{ISO 9241: Part 11}},
url = {http://www.userfocus.co.uk/resources/iso9241/part11.html},
urldate = {05/06/14}
}
@article{ISOIEC29119,
doi = {10.1109/IEEESTD.2013.6588537},
file = {:C$\backslash$:/Users/Administrador/Dropbox/Trabajo de Grado/Testing/Software and systems engineering Standard.pdf:pdf},
keywords = {29119,29119-1,Formal verification,IEC standards,IEEE standards,ISO,ISO standards,ISO/IEC/IEEE 29119 standard,ISO/IEC/IEEE 29119-1 standard,Process control,Software testing,Test Plan,Test Planning Process,Testing,internationally-agreed standard set,program testing,software engineering,software testing,software testing standards,systems engineering,verification and validation},
language = {English},
month = sep,
pages = {1--64},
publisher = {IEEE},
title = {{Software and systems engineering Software testing Part 1:Concepts and definitions}},
url = {http://ieeexplore.ieee.org/articleDetails.jsp?arnumber=6588537},
year = {2013}
}
@misc{ISO/IEC 25000,
title = {{ISO/IEC 25000:2005 - Software Engineering -- Software product Quality Requirements and Evaluation (SQuaRE) -- Guide to SQuaRE}},
url = {http://www.iso.org/iso/catalogue\_detail.htm?csnumber=35683},
urldate = {05/06/14}
}
@misc{ISO/IEC 25010,
title = {{ISO/IEC 25010:2011 - Systems and software engineering -- Systems and software Quality Requirements and Evaluation (SQuaRE) -- System and software quality models}},
url = {http://www.iso.org/iso/home/store/catalogue\_ics/catalogue\_detail\_ics.htm?csnumber=35733},
urldate = {05/06/14}
}
@misc{,
title = {{OpenTTCN/Language reference - OpenTTCN}},
url = {http://wiki.openttcn.com/media/index.php/OpenTTCN/Language\_reference\#Setting\_verdicts},
urldate = {13/06/14}
}
@misc{ISO_ESTANDAR,
keywords = {Free,Tutorials,audit,beginners,estimation,inspection,level of testing,quality assurance and quality control,software,techniques,testing,testing and debugging,testing types},
title = {{Software Testing ISO Standards}},
url = {http://www.tutorialspoint.com/software\_testing/testing\_iso\_standards.htm},
urldate = {05/06/14}
}
@article{IEEE1994,
doi = {10.1109/IEEESTD.1994.121430},
file = {:C$\backslash$:/Users/Administrador/Dropbox/Trabajo de Grado/Testing/IEEE Guide for Software Veriﬁcation.pdf:pdf},
keywords = {V tasks,V\&amp,baseline change assessment,life cycle phases,master schedule},
language = {English},
pages = {i--87},
publisher = {IEEE},
title = {{IEEE Guide for Software Verification and Validation Plans}},
url = {http://ieeexplore.ieee.org/articleDetails.jsp?arnumber=838043},
year = {1994}
}
